******* Особенности работы метода Path.of() *******

Структура: static Path of(String first, String... more)

Возвращает Path путем преобразования строки пути или последовательности строк,
которые при соединении образуют строку пути. Если в параметре 'more' не указаны
какие-либо элементы, то значением первого параметра является строка пути для
преобразования. Если 'more' указывает один или несколько элементов, то каждая
непустая строка, включая первую, считается последовательностью элементов имени
и объединяется для формирования строки пути.

Подробная информация о том, как соединяются строки, зависит от поставщика, но
обычно они будут соединяться с использованием разделителя имен в качестве
разделителя.

Например, если разделителем имен является "/" и вызывается getPath("/foo","bar","gus"),
то строка пути "/foo/bar/gus" преобразуется в путь.

Path, представляющий пустой путь, возвращается, если first является пустой строкой,
а 'more' не содержит непустых строк. Путь получается путем вызова метода getPath
файловой системы по умолчанию.

Обратите внимание, что, хотя этот метод очень удобен, его использование подразумевает
предполагаемую ссылку на файловую систему по умолчанию и ограничивает полезность
вызывающего кода. Следовательно, его не следует использовать в библиотечном коде,
предназначенном для гибкого повторного использования. Более гибкая альтернатива —
использовать существующий экземпляр Path в качестве привязки, например:
------------------------------------------------------------------------------------
Path dir = ...
Path path = dir.resolve("file");
------------------------------------------------------------------------------------

Параметры:
first - строка пути или начальная часть строки пути;
more - дополнительные строки, которые нужно объединить, чтобы сформировать строку пути;

Возвращает:
результирующий Path

Исключения:
InvalidPathException - если строка пути не может быть преобразована в путь

