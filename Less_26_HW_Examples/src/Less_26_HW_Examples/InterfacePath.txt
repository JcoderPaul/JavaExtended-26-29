******* Interface Path - Интерфейс 'ПУТЬ' *******

public interface Path extends Comparable<Path>, Iterable<Path>, Watchable

Модуль: java.base
Пакет: java.nio.file
Супер-интерфейсы (предки): Comparable<Path>, Iterable<Path>, Watchable

Объект, который может использоваться для поиска файла в файловой системе.
Обычно это путь к файлу, зависящий от системы.

Путь представляет собой иерархический путь, состоящий из последовательности
элементов имени каталога и файла, разделенных специальным разделителем или
разделителем (в разных ОС они разные). Также может присутствовать корневой
компонент, определяющий иерархию файловой системы. Элемент имени, наиболее
удаленный от корня иерархии каталогов, является именем файла или каталога.
Другие элементы имени — это имена каталогов. Путь может представлять корень,
корень и последовательность имен или просто один или несколько элементов имени.
Путь считается пустым путем, если он состоит только из одного пустого элемента
имени. Доступ к файлу с использованием пустого пути эквивалентен доступу к
каталогу файловой системы по умолчанию.

Путь определяется методами getFileName, getParent, getRoot и subpath для доступа
к компонентам пути или подпоследовательности его элементов имени.

В дополнение к доступу к компонентам пути Path также определяет методы разрешения
и разрешения Sibling для объединения путей. Метод relativize, который можно
использовать для построения относительного пути между двумя путями. Пути можно
сравнивать и тестировать друг с другом с помощью методов startWith и endWith.

Этот интерфейс расширяет интерфейс Watchable, так что каталог, расположенный по
пути, может быть зарегистрирован с помощью WatchService, а записи в каталоге
отслеживаются.

ПРЕДУПРЕЖДЕНИЕ. Этот интерфейс предназначен только для тех, кто разрабатывает
собственные реализации файловой системы. В будущих версиях к этому интерфейсу
могут быть добавлены методы.

Доступ к файлам:
Пути могут использоваться с классом Files для работы с файлами, каталогами и
другими типами файлов. Например, предположим, что мы хотим, чтобы BufferedReader
считывал текст из файла «access.log». Файл находится в каталоге «logs»
относительно текущего рабочего каталога и имеет кодировку UTF-8.
----------------------------------------------------------------------------------
Path path = FileSystems.getDefault().getPath("logs", "access.log");
BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8);
----------------------------------------------------------------------------------

Совместимость:
Пути, связанные с поставщиком по умолчанию, обычно совместимы с классом java.io.File.
Пути, созданные другими поставщиками, вряд ли будут совместимы с абстрактными именами
путей, представленными java.io.File. Метод toPath может использоваться для получения
пути из абстрактного имени пути, представленного объектом java.io.File. Полученный
путь можно использовать для работы с тем же файлом, что и объект java.io.File. Кроме
того, метод toFile полезен для создания файла из строкового представления пути.

Параллелизм:
Реализации этого интерфейса неизменяемы и безопасны для использования несколькими
параллельными потоками.

Доступна в JAVA c: 1.7

******* МЕТОДЫ *******

- int compareTo(Path other) - Лексикографически сравнивает два абстрактных пути.

- default boolean endsWith(String other) - Проверяет, заканчивается ли этот путь путем,
  созданным путем преобразования заданной строки пути точно так, как указано в методе
  endWith(Path).

- boolean endsWith(Path other) - Проверяет, заканчивается ли этот путь заданным путем.

- boolean equals(Object other) - Проверяет этот путь на равенство с заданным объектом.

- Path getFileName() - Возвращает имя файла или каталога, обозначенного этим путем,
                       как объект пути.

- FileSystem getFileSystem() - Возвращает файловую систему, создавшую этот объект.

- Path getName(int index) - Возвращает элемент имени этого пути в виде объекта Path.

- int getNameCount() - Возвращает количество элементов имени в пути.

- Path getParent() - Возвращает родительский путь или null, если у этого пути нет
                     родителя.

- Path getRoot() - Возвращает корневой компонент этого пути в виде объекта Path или
                   null, если этот путь не имеет корневого компонента.

- int hashCode() - Вычисляет хэш-код для этого пути.

- boolean isAbsolute() - Сообщает, является ли этот путь абсолютным.

- default Iterator<Path> iterator() - Возвращает итератор по элементам имени этого пути.

- Path normalize() - Возвращает путь, который представляет собой этот путь с удаленными
                     избыточными элементами имени.

- static Path of(String first, String... more) - Возвращает Path путем преобразования
  строки пути или последовательности строк, которые при соединении образуют строку пути.

- static Path of(URI uri) - Возвращает путь путем преобразования URI.

- default WatchKey register(WatchService watcher, WatchEvent.Kind<?>... events) - Регистрирует
  файл, расположенный по этому пути, в службе наблюдения.

- WatchKey register(WatchService watcher, WatchEvent.Kind<?>[] events, WatchEvent.Modifier... modifiers) -
  Регистрирует файл, расположенный по этому пути, в службе наблюдения.

- Path relativize(Path other) - Создает относительный путь между этим путем и заданным путем.

- default Path resolve(String other) - Преобразует заданную строку пути в путь и разрешает ее
                                       по этому пути точно так, как указано в методе разрешения.

- Path resolve(Path other) - Разрешить данный путь против этого пути.

- default Path resolveSibling(String other) - Преобразует заданную строку пути в путь и сопоставляет
  его с родительским путем этого пути точно так, как указано в методе resolveSibling.

- default Path resolveSibling(Path other) - Разрешает данный путь относительно родительского пути этого пути.

- default boolean startsWith(String other) - Проверяет, начинается ли этот путь с пути, созданного путем
  преобразования заданной строки пути точно так, как указано в методе startsWith(Path).

- boolean startsWith(Path other) - Проверяет, начинается ли этот путь с заданного пути.

- Path subpath(int beginIndex, int endIndex) - Возвращает относительный путь, являющийся подпоследовательностью
                                               элементов имени этого пути.

- Path toAbsolutePath() - Возвращает объект Path, представляющий абсолютный путь этого пути.

- default File toFile() - Возвращает объект File, представляющий этот путь.

- Path toRealPath(LinkOption... options) - Возвращает реальный путь к существующему файлу.

- String toString() - Возвращает строковое представление этого пути.

- URI toUri() - Возвращает URI для представления этого пути.

------------------------------------------------------------------------------------------------------
Более подробно см. https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/nio/file/Path.html

