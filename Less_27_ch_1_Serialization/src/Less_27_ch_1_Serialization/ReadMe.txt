******* Сериализация или Serialization *******

Сериализация представляет процесс записи состояния объекта в поток,
соответственно процесс извлечения или восстановления состояния объекта
из потока называется десериализацией. Сериализация очень удобна, когда
идет работа со сложными объектами.

******* Интерфейс Serializable *******

!!! Сериализовать можно только те объекты, которые реализуют интерфейс Serializable !!!

Этот интерфейс не определяет никаких методов, просто он служит указателем
системе, что объект, реализующий его, может быть сериализован.

******* Класс ObjectOutputStream *******
Для сериализации объектов в поток используется класс ObjectOutputStream.
Он записывает данные в поток. Для создания объекта ObjectOutputStream в
конструктор передается поток, в который производится запись:
- ObjectOutputStream(OutputStream out)

Для работы с данными ObjectOutputStream использует следующие методы:
- void close(): закрывает поток;
- void flush(): очищает буфер и сбрасывает его содержимое в выходной поток;
- void write(byte[] buf): записывает в поток массив байтов;
- void write(int val): записывает в поток один младший байт из val;
- void writeBoolean(boolean val): записывает в поток значение boolean;
- void writeByte(int val): записывает в поток один младший байт из val;
- void writeChar(int val): записывает в поток значение типа char, представленное целочисленным значением;
- void writeDouble(double val): записывает в поток значение типа double;
- void writeFloat(float val): записывает в поток значение типа float;
- void writeInt(int val): записывает целочисленное значение int;
- void writeLong(long val): записывает значение типа long;
- void writeShort(int val): записывает значение типа short;
- void writeUTF(String str): записывает в поток строку в кодировке UTF-8;
- void writeObject(Object obj): записывает в поток отдельный объект;
Эти методы охватывают весь спектр данных, которые можно сериализовать.

******* Класс ObjectInputStream *******

Класс ObjectInputStream отвечает за обратный процесс - чтение ранее сериализованных
данных из потока (десериализация). В конструкторе он принимает ссылку на поток ввода:
- ObjectInputStream(InputStream in)

Функционал ObjectInputStream сосредоточен в методах, предназначенных для чтения различных
типов данных. Основные методы класса ObjectInputStream:
- void close(): закрывает поток;
- int skipBytes(int len): пропускает при чтении несколько байт, количество которых равно len;
- int available(): возвращает количество байт, доступных для чтения;
- int read(): считывает из потока один байт и возвращает его целочисленное представление;
- boolean readBoolean(): считывает из потока одно значение boolean;
- byte readByte(): считывает из потока один байт;
- char readChar(): считывает из потока один символ char;
- double readDouble(): считывает значение типа double;
- float readFloat(): считывает из потока значение типа float;
- int readInt(): считывает целочисленное значение int;
- long readLong(): считывает значение типа long;
- short readShort(): считывает значение типа short;
- String readUTF(): считывает строку в кодировке UTF-8;
- Object readObject(): считывает из потока объект;

******* Исключение данных из сериализации *******

По умолчанию сериализуются все переменные объекта. Однако, возможно, мы хотим, чтобы некоторые
поля были исключены из сериализации. Для этого они должны быть объявлены с модификатором transient.