******* Класс RandomAccessFile *******

Экземпляры этого класса поддерживают как чтение, так и запись в файл
с произвольным доступом. Файл с произвольным доступом ведет себя как
большой массив байтов, хранящийся в файловой системе. Существует своего
рода курсор или индекс в подразумеваемом массиве, называемый файловым
указателем.

Операции ввода читают байты, начиная с указателя файла, и перемещают
указатель файла дальше прочитанных байтов. Если файл произвольного
доступа создан в режиме чтения/записи, то доступны и операции вывода.

Операции вывода записывают байты, начиная с указателя файла, и продвигают
указатель файла за пределы записанных байтов. Операции вывода, которые
записывают за текущий конец подразумеваемого массива, вызывают расширение
массива. Указатель файла может быть прочитан методом getFilePointer и
установлен методом seek.

Как правило, для всех процедур чтения в этом классе справедливо то, что
если конец файла достигается до того, как будет прочитано желаемое
количество байтов, генерируется исключение EOFException (своего рода
исключение IOException).

Если какой-либо байт не может быть прочитан по какой-либо причине, кроме
конца файла, генерируется исключение IOException, отличное от EOFException.
В частности, исключение IOException может быть вызвано, если поток был закрыт.

*********************************************************************************
Конструкторы класса:
* 1 * - RandomAccessFile(File file, String mode) - создает файловый поток с
        произвольным доступом для чтения и, при необходимости, для записи в
        файл, указанный аргументом File file.

Параметры:
- file - файловый объект;
- mode - режим доступа, как файлу;

Режимы доступа:
- "r" - Открыто только для чтения. Вызов любого из методов записи результирующего
        объекта приведет к возникновению исключения IOException.
- "rw" - Открыть для чтения и записи. Если файл еще не существует, будет предпринята
         попытка его создать.
- «rws» - Открыто для чтения и записи, как и «rw», а также требует, чтобы каждое
          обновление содержимого файла или метаданных записывалось синхронно на
          базовое устройство хранения.
- «rwd» - Открыто для чтения и записи, как и «rw», а также требует, чтобы каждое
          обновление содержимого файла записывалось синхронно на базовое устройство
          хранения.

* 2 * - RandomAccessFile(String name, String mode) - создает файловый поток
        с произвольным доступом для чтения и, при необходимости, для записи
        в файл с указанным именем (name).

Параметры:
- name - системно-зависимое имя файла, путь к файлу;
- mode - режим доступа;

Исключения:
- IllegalArgumentException — если аргумент режима не равен одному из «r»,
                             «rw», «rws» или «rwd».
- FileNotFoundException - если режим "r", но строка с именем не обозначает существующий
                          обычный файл, или если режим "rw", но строка с именем не
                          ссылается на существующий, доступный для записи обычный файл и
                          новый обычный файл с таким именем не может быть создан, или
                          если при открытии или создании файла возникает какая-либо
                          другая ошибка.

- SecurityException — если диспетчер безопасности существует и его метод checkRead запрещает
                      доступ для чтения к файлу или режим «rw», а метод checkWrite менеджера
                      безопасности запрещает доступ для записи в файл.

*********************************************************************************
Методы класса:

- void close() - закрывает этот поток файлов с произвольным доступом и
                 освобождает все системные ресурсы, связанные с потоком.

- FileChannel getChannel() - возвращает уникальный объект FileChannel,
                             связанный с файлом.

- FileDescriptor getFD() - возвращает непрозрачный объект дескриптора файла,
                           связанный с потоком.

- long getFilePointer() - возвращает текущее смещение в файле.
- long length() - возвращает длину файла.
- int read() - считывает байт данных из файла.

- int read(byte[] b) - считывает до b.length байтов данных из этого файла в
                       массив байтов.

- int read(byte[] b, int off, int len) - считывает до len байт данных из
                                         этого файла в массив байтов.

- boolean readBoolean() - читает логическое значение из файла.
- byte readByte() - считывает восьмибитное значение со знаком из файла.
- char readChar() - читает символ из файла.
- double readDouble() - читает double из файла.
- float readFloat() - читает число с плавающей запятой из файла.

- void readFully(byte[] b) - считывает байты b.length из файла в массив байтов,
                             начиная с текущего указателя файла.

- void readFully(byte[] b, int off, int len) - считывает ровно len байт из этого
                                               файла в массив байтов, начиная с
                                               текущего указателя файла.

- int readInt() - считывает из файла 32-битное целое число со знаком.
- String readLine() - читает следующую строку текста из файла.
- long readLong() - считывает из файла 64-битное целое число со знаком.
- short readShort() - считывает из файла 16-битное число со знаком.
- int readUnsignedByte() - считывает из файла восьмибитное число без знака.
- int readUnsignedShort() - считывает из файла 16-битное число без знака.
- String readUTF() - читает строку из файла.

- void seek(long pos) - устанавливает смещение указателя файла, измеренное от
                        начала файла, при котором происходит следующее чтение
                        или запись.

- void setLength(long newLength) - устанавливает длину файла.

- int skipBytes(int n) - пытается пропустить n байтов ввода, отбрасывая
                         пропущенные байты.

- void write(byte[] b) - записывает b.length байтов из указанного массива
                         байтов в файл, начиная с текущего указателя файла.

- void write(byte[] b, int off, int len) - записывает len байтов из указанного
                                           массива байтов, начиная со смещения,
                                           в файл.

- void write(int b) - записывает указанный байт в файл.

- void writeBoolean(boolean v) - записывает логическое значение в файл, как
                                 однобайтовое значение.

- void writeByte(int v) - записывает байт в файл как однобайтовое значение.
- void writeBytes(String s) - записывает строку в файл в виде последовательности байтов.
- void writeChar(int v) - записывает char в файл как двухбайтовое значение, старшим байтом вперед.
- void writeChars(String s) - записывает строку в файл в виде последовательности символов.

- void writeDouble(double v) - преобразует аргумент double в тип long с помощью
                               метода doubleToLongBits в классе Double, а затем
                               записывает это значение типа long в файл в виде
                               восьмибайтовой величины, старшим байтом вперед.

- void writeFloat(float v) - преобразует аргумент с плавающей запятой в целое с
                             помощью метода floatToIntBits в классе Float, а затем
                             записывает это целочисленное значение в файл в виде
                             четырехбайтового числа, старшим байтом вперед.

- void writeInt(int v) - записывает число Int в файл, как четыре байта, старший байт первым.
- void writeLong(long v) - записывает в файл значение Long в виде восьми байтов, старшим байтом вперед.
- void writeShort(int v) - записывает Short в файл в виде двух байтов, старшим байтом вперед.

- void writeUTF(String str) - записывает строку в файл, используя модифицированную
                              кодировку UTF-8 машинно-независимым способом.

Методы, унаследованные от класса java.lang.Object: clone, equals, finalize, getClass,
                                                   hashCode, notify, notifyAll, toString,
                                                   wait.

*********************************************************************************
Более подробно смотреть: https://docs.oracle.com/javase/7/docs/api/java/io/RandomAccessFile.html