******** Класс InputStream ********
Базовый класс InputStream представляет классы, которые получают данные из различных источников:
- массив байтов;
- строка (String);
- файл;
- канал (pipe): данные помещаются с одного конца и извлекаются с другого;
- последовательность различных потоков, которые можно объединить в одном потоке;
- другие источники (например, подключение к интернету).

Для работы с указанными источниками используются подклассы базового класса InputStream:
- BufferedInputStream - Буферизированный входной поток.
- ByteArrayInputStream - Позволяет использовать буфер в памяти (массив байтов) в качестве
                         источника данных для входного потока.
- DataInputStream - Входной поток, включающий методы для чтения стандартных типов данных Java.
- FileInputStream - Для чтения информации из файла.
- FilterInputStream - Абстрактный класс, предоставляющий интерфейс для классов-надстроек, которые
                      добавляют к существующим потокам полезные свойства.
- InputStream - Абстрактный класс, описывающий поток ввода.
- ObjectInputStream - Входной поток для объектов.
- StringBufferInputStream - Превращает строку (String) во входной поток данных InputStream.
- PipedInputStream - Реализует понятие входного канала.
- PushbackInputStream - Входной поток, поддерживающий однобайтовый возврат во входной поток.
- SequenceInputStream - Сливает два или более потока InputStream в единый поток.

Методы класса:
- int available() - возвращает количество байтов ввода, доступные в данный момент для чтения;
- close() - закрывает источник ввода. Следующие попытки чтения передадут исключение IOException;
- void mark(int readlimit) - помещает метку в текущую точку входного потока, которая остаётся
                             корректной до тех пор, пока не будет прочитано readlimint байт;
- boolean markSupported() - возвращает true, если методы mark() и reset() поддерживаются потоком;
- int read() - возвращает целочисленное представление следующего доступного байта в потоке,
               при достижении конца файла возвращается значение -1;
- int read(byte[] buffer) - пытается читать байты в буфер, возвращая количество прочитанных байтов,
                            при достижении конца файла возвращает значение -1;
- int read(byte[] buffer, int byteOffset, int byteCount) - пытается читать до byteCount байт в buffer,
                                                           начиная с смещения byteOffset, по достижении
                                                           конца файла возвращает -1;
- reset() - сбрасывает входной указатель в ранее установленную метку;
- long skip(long byteCount) - пропускает byteCount байт ввода, возвращая количество
                              проигнорированных байтов;