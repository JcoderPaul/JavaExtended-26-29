******* SerialVersionUID внутри класса Serializable в Java *******

Во время сериализации среда выполнения Java создает номер версии для класса,
чтобы он мог десериализовать его позже. Этот номер версии известен как
SerialVersionUID в Java. Если во время десериализации SerialVersionUID
не совпадает, процесс завершится с ошибкой InvalidClassException в качестве
исключения в потоке «main» java.io.InvalidClassException , а также напечатает
имя класса и соответствующий SerialVersionUID.

Как вариант в нашем примере, когда мы сами присвоили версию SerialVersionUID:
" Exception in thread "main" java.lang.RuntimeException: java.io.InvalidClassException:
Less_27_ch_3_SerialVersionUID.SerializedClass.Worker; local class incompatible: stream
classdesc serialVersionUID = 2, local class
          serialVersionUID = 1 "

Как вариант в нашем примере, когда Java сделала это за нас SerialVersionUID:
" Exception in thread "main" java.lang.RuntimeException: java.io.InvalidClassException:
Less_27_ch_3_SerialVersionUID.SerializedClass.Worker; local class incompatible: stream
classdesc serialVersionUID = 2021062786793489978, local class
          serialVersionUID = -5249985541608255973 "

Быстрое решение этой проблемы – копирование SerialVersionUID и объявление их как частной
статической конечной длинной константы в нашем классе.

Если мы не объявляем SerialVersionUID как статическое, конечное и длинное значение в нашем
классе, механизм Serialization создает его для нас. Этот механизм чувствителен ко многим
деталям, включая поля в вашем классе, их модификатор доступа, интерфейс, который они реализуют,
и даже различные реализации компилятора. Любые изменения в классе или использование другого
компилятора могут привести к различному SerialVersionUID, и они в конечном итоге прекратят
перезагружать сериализованные данные.

Слишком рискованно полагаться на механизм сериализации Java для генерации этого идентификатора,
и поэтому рекомендуется объявить явный SerialVersionUID в нашем классе Serializable.

JDK предоставляет инструмент под названием serialver, который можно использовать для генерации
SerialVersionUID для старых классы. Это очень полезно, если мы внесли изменения в наш класс,
что нарушает сериализацию и наше приложение не может перезагрузить сериализованные экземпляры.
Мы можем просто использовать этот инструмент для создания SerialVersionUID для старых экземпляров,
а затем явно использовать его в своем классе, объявив static final long поле SerialVersionUID.

SerialVersionUID влияет на производительность и безопасность.

!!! ПОВТОР !!!
SerialVersionUID используется для версии сериализованных данных. Десериализовать класс можно
только в том случае, если его SerialVersionUID совпадает с сериализованным экземпляром.

Когда мы не объявляем SerialVersionUID в нашем классе, среда выполнения Java генерирует его
для нас, но этот процесс чувствителен ко многим метаданным класса, включая количество полей,
тип полей, модификатор доступа к полям, интерфейс, реализованный классом и т. Д.

Рекомендуется объявить SerialVersionUID самостоятельно, как частную статическую переменную
final long, чтобы избежать запуска механизма автоматической генерации SerialVersionUID.

Рекомендуется изучить - Джошуа Блоха «Эффективная Java»
